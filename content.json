[{"title":"css经典底部布局sticky footers","date":"2020-01-05T08:08:50.000Z","path":"ck50qstrn0000nsv82qrkf8xs.html","text":"问题在网页设计中，Sticky footers设计是最古老和最常见的效果之一，大多数人都曾经经历过。它可以概括如下：如果页面内容不够长的时候，页脚块粘贴在视窗底部；如果内容足够长时，页脚块会被内容向下推送。 这种效果不仅是无处不在，很受欢迎，而且实现起来看上去也非常容易。但实际上实现起来要比预期花的时间更多。此外，在CSS2.1中的解决方案中几乎都要给页脚设置一个固定高度。这是很脆弱的，很少是可行的。实际上实现这个效果过于复杂，而且还需要增加特定的标记和一些Hack手段。在CSS2.1中受到一些限制，但使用现代CSS，我们能把这个效果做得更好，那要如何做呢？ 如果你从未看过这样的效果或者对这个问题的相关资料感兴趣的话，这里有一些受欢迎的文章，提供了许多Web开发人员的构思和解决方案： CSS Sticky Footer Layout Ryan Fait’s CSS Sticky Footer Sticky Footer Sticky CSS footers: The flexible way Modern Clean CSS “Sticky Footer” 最后两个是最简洁的实现方案，但仍然有其自己的局限性。 固定高度的解决方案我们在&lt;body&gt;元素下使用一些常用的HTML标签元素： 1234567891011&lt;header&gt; &lt;h1&gt;Site name&lt;&#x2F;h1&gt;&lt;&#x2F;header&gt;&lt;main&gt; &lt;p&gt;Bacon Ipsum dolor sit amet... &lt;!-- Filler text from baconipsum.com --&gt;&lt;&#x2F;p&gt;&lt;&#x2F;main&gt;&lt;footer&gt;&lt;p&gt;© 2015 No rights reserved.&lt;&#x2F;p&gt;&lt;p&gt;Made with ♥ by an anonymous pastafarian.&lt;&#x2F;p&gt;&lt;&#x2F;footer&gt; 给页面写一些基本样式。看到的效果如下图所示： 现在，我们来减少一些内容。你可以看看会发生什么，如下图所示： 太好了，问题出现了，但我们要如何解决这个问题呢？ 如果我们假定页脚文本不会溢出容器，我们可以为容器推算出其高度： 12行 * 行高 + 3 x 段落的margin + 垂直的padding ＝ 2 x 1.5em + 3 x 1em + 1em &#x3D; 7em 同样，页头的高度是2.5em。因此，通过使用视窗相对单位和calc()，使用一行CSS代码，可以实现Sticky footers效果： 12345main &#123; min-height: calc(100vh - 2.5em - 7em); &#x2F;* Avoid padding&#x2F;borders screwing up our height: *&#x2F; box-sizing: border-box;&#125; 或者，我们可以使用一个容器将&lt;header&gt;和&lt;main&gt;元素包裹起来，这样我们只需要计算页脚的高度： 123#wrapper &#123; min-height: calc(100vh - 7em);&#125; 这似乎略优于现有的固定高度的解决方案，主要是由于其简单。然而，除了简单的布局，但这是不切合实际。它要求我们每次都要计算包裹页脚文本容器的高度，这样我们需要每次计算容器的min-height。除非我们愿意添加HTML容器来包裹我们的标题和内容，不过同意也要计算。当然，在这个时代，我们可以做得更好，对吗？ Flexbox解决方案解决这类问题，Flexbox是最完美的方案。我们只需要几行CSS代码就可以完美的实现，而且不需要一些奇怪的计算或添加额外的HTML元素。首先，我们需要在&lt;body&gt;元素上设置display:flex。如果父元素(&lt;body&gt;)的三个块元素，使用Flexbox切换布局，还需要设置flex-flow:column，否则这三个块会排成一行。如下图所示： 1234body &#123; display: flex; flex-flow: column;&#125; 在这一点上，我们的页面看起来和之前一样，因为每个元素所占视窗高度是由其内容决定。如此一来，我们可以说还没有真正的利用上Flexbox。 从实际出发，需要给&lt;body&gt;设置min-height值为100vh，让&lt;body&gt;内容不足视窗高度时也能占据整个视窗。虽然这样做了，效果看起来，还是如下图所示： 即使给&lt;body&gt;指定了最小高度，但每个盒子的高度仍取决于其内容大小。 这里我们需要在页头和页脚设置高度，但其内容的高度自动伸缩的来适配剩余空间。我们可以在&lt;main&gt;上设置flex值大于0(常用的是1)： 123456body &#123; display: flex; flex-flow: column; min-height: 100vh;&#125;main &#123; flex: 1; &#125; flex属性是flex-grow、flex-shrink和flex-basis三个属性缩写。任何元素设置了flex大于0，元素就会灵活的控制自己的尺寸，来适配容器的剩余空间。例如，如果&lt;main&gt;设置了flex:2，&lt;footer&gt;设置了flex:1，那么页脚的高度是主内容高度的二分之一，同样的，如果值设置的是4和2而不是2和1，他们效果是一样的，因为他们的倍数比例值一样。 就这样，不需要更多的代码！就能实现如下图所示的Sticky footers效果： 原文: CSS秘密花园： Sticky footers","tags":[{"name":"css布局","slug":"css布局","permalink":"http://www.anyaoqi.cn/tags/css%E5%B8%83%E5%B1%80/"}]},{"title":"footers","date":"2020-01-05T07:29:38.000Z","path":"ck50p466r0000t4v8b2pugbzg.html","text":"","tags":[]},{"title":"微信小小程序入门学习笔记","date":"2019-12-29T08:18:20.000Z","path":"ck4qtx4qn00086ov8a7jccspi.html","text":"小程序入门学习笔记基础知识1.微信小程序介绍微信小程序，简称小程序，英文名Mini Program，是一种不需要下载安装即可使用的应用，它实现了应用“触手可及”的梦想，用户扫一扫或搜一下即可打开应用。 2.小程序注册​ 2.1 进入官网注册小程序 ​ 注册网址：mp.weixin.qq.com ​ 2.2 获取Appid ​ 登录小程序 &gt; 开发&gt; 开发设置 3.小程序开发工具 3.1 下载开发工具 ​ 下载地址：https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html 3.2 创建小程序项目 4.小程序代码结构介绍（云开发） 文件夹： project.config.json —— 项目配置文件 miniprogram —— 项目源代码 pages 页面 cloudfunctions —— 云函数 文件类型： .json 文件 配置文件 .wxml 文件 页面结构 .wxss 文件 页面样式 .js 页面js脚本 5.Json配置文件常用配置介绍： 5.1 project.config.json —— 项目配置文件 miniprogramRoot：小程序源代码文件目录 cloudfunctionRoot：小程序云发开目录 setting：项目其他配置 appid：项目appid projectname：项目名称 libVersion：项目版本库的版本 5.2 app.json 全局配置 pages：页面配置 window：窗口配置 backgroundColor: 窗口背景色 tabBar：底部导航配置 color 文字颜色 list 底部菜单项 5.3 page.json 页面配置 更多详细配置介绍：小程序开发文档 6.页面结构.wxml文件小程序的wxml文件和html文件差不多，但小程序里面不光p，div标签，小程序还自定义了很多html里面没有的组件。 常用组件:view block 6.1 数据绑定在page中的data定义数据，在wxml中使用双花括号使用数据 &lt;image src=&quot;&quot;&gt;&lt;/image&gt; 6.2 常用属性数据循环 wx:for item为循环的内容，index为索引 &lt;view wx:for=&quot;&quot;&gt; ` 条件渲染 wx:if &lt;view wx:if=&quot;&quot;&gt;登录&lt;/view&gt; &lt;view wx:else&gt;未登录&lt;/view&gt; 显示隐藏-hidden &lt;view hidden=&quot;{{isLogin}}&quot;&gt;登录&lt;/view&gt; &lt;view hidden=&quot;{{!isLogin}}&quot;&gt;未登录&lt;/view&gt;wx:if和hidden的区别是 前者会把标签从结构中移除，hidden则只是将标签隐藏 更多组件：https://developers.weixin.qq.com/miniprogram/dev/component/ 事件绑定 点击事件：bindtap bindtap1&lt;button bindtap=&quot;clickName&quot;&gt;Click me&lt;/button&gt; 点击事件：catchtap （禁止事件传递） bindtap1&lt;button catchtap=&quot;clickName&quot;&gt;Click me&lt;/button&gt; 5.页面样式wxss5.1 单位使用 rpx 5.2 使用 @import ‘name.css’ 引入其他样式文件 5.3 UI样式库：WeUI、iView Weapp、Vant Weapp 6.页面交互Js（重点）6.1 在data中定义数据，页面中使用使用 6.2 修改数据使用this.setData方法 6.3 函数传参 在标签使用自定义属性，然后在函数的event.target.dataset对象中获取值 云开发1.云数据库1.1 初始化 （连接数据库） const db=wx.cloud.database() 1.2 获取集合-collection方法 db.collection(&quot;user&quot;) 1.3 增加数据-add()方法 db.collection(&quot;user&quot;).add({ data: { name:&#39;jake&#39;, age:23 } }) 1.4 修改数据-update()方法 db.collection(&quot;user&quot;).doc(id).update({ data:{} }) 1.4 查找数据-where()方法 db.collection(&quot;user&quot;).where({ name:&quot;Jack&quot; }).then() 1.4 删除数据-remove()方法 db.collection(&quot;user&quot;).dot(id).remove().then() 更多方法请查询官网Api : https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-sdk-api/Cloud.database.html 2.云函数2.1 新建云函数 ​ 在cloudfunctions文件夹上右击选择新建Node.js云函数 2.2 修改云函数 ​ 修改index.js ​ event 传入的参数对象 ​ context 当前上下文 包含当前用户信息 2.3 上传部署云函数 ​ 在创建的云函数文件夹右击选择*上传并部署：云端安装依赖 * 2.4 调用云函数 wx.cloud.callFunction({ name:&quot;云函数名称&quot;, data:{参数} }).then() 3.云存储上传照片示例3.1 从本地相册选择图片或使用相机拍照 wx.chooseImage 123456789wx.chooseImage(&#123; count: 1, sizeType: ['original', 'compressed'], sourceType: ['album', 'camera'], success (res) &#123; // tempFilePath可以作为img标签的src属性显示图片 const tempFilePaths = res.tempFilePaths &#125;&#125;) 3.2 上传照片到云存储 wx.uploadFile 123456789101112131415161718wx.chooseImage(&#123; success (res) &#123; const tempFilePaths = res.tempFilePaths wx.uploadFile(&#123; url: 'https://example.weixin.qq.com/upload', //仅为示例，非真实的接口地址 filePath: tempFilePaths[0], name: 'file', formData: &#123; 'user': 'test' &#125;, success (res)&#123; const data = res.data console.log(res.fileID) //do something &#125; &#125;) &#125;&#125;) 展示图片示例3.3 从数据库获取图片 123456db.collection(\"image\").where(&#123; _openid:openid&#125;).get().then( res =&gt; &#123; console.log(res.data) this.setData(&#123; images:res.data &#125;)&#125;) 图片下载示例3.4 点击下载 获取文件临时路径 12345678wx.cloud.downloadFile(&#123; fileID: '', // 文件 ID success: res =&gt; &#123; // 返回临时文件路径 console.log(res.tempFilePath) &#125;, fail: console.error&#125;) 3.4 保存到手机 wx.saveImageToPhotosAlbum(Object object) 1234wx.saveImageToPhotosAlbum(&#123; filePath:tempFilePath, success(res) &#123; &#125;&#125;) 本文仅是我的小程序入门学习记录，并非是一一篇教程。","tags":[{"name":"微信小程序","slug":"微信小程序","permalink":"http://www.anyaoqi.cn/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"学习记录","slug":"学习记录","permalink":"http://www.anyaoqi.cn/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"}]},{"title":"使用css禁用点击事件","date":"2019-11-20T05:43:28.000Z","path":"ck4qqb0y5000nu4v8g1v1dftu.html","text":"js阻止默认行为：event.preventDefault() 或 return falseJs阻止事件冒泡： evnet.stopPropagation() 或 e.cancelBubble = true （IE） 使用css禁用点击事件&emsp;&emsp;在css中有很多实用但平常不常用的属性，比如今天要说的 pointer-events属性。这个css属性的作用就是控制标签的事件是否可用，如果在css里面把标签的这个属性值改为none，那么这个标签就失去了任何的事件，也就做到了禁用点击事件的效果，即使在js里面已经绑定过事件也是不可点击的。 pointer-events 的作用：1 阻止用户的点击动作产生任何效果 2 阻止缺省鼠标指针的显示 3 阻止CSS里的hover和active状态的变化触发事件 4 阻止JavaScript点击动作触发的事件 示例： .disabled { pointer-events: none; cursor: default; opacity: 0.6; }","tags":[{"name":"css","slug":"css","permalink":"http://www.anyaoqi.cn/tags/css/"},{"name":"pointer-events","slug":"pointer-events","permalink":"http://www.anyaoqi.cn/tags/pointer-events/"}]},{"title":"说说我看完《放学后》的感触","date":"2019-11-19T09:10:19.000Z","path":"ck4qqb10n000vu4v8f0igfie0.html","text":"我特别喜欢东野圭吾的书，这篇书又是他的成名作，这本书一直很想读，读完之后有一句感悟想记录下来。 我们有拼了命也要保护的东西 &emsp;&emsp;这本东野圭吾的《放学后》最后的杀人理由看似有些荒唐，但确实是很多人内心真实的想法。在我看来这关乎尊严，内心的折磨往往比肉体的折磨更痛苦。就像现实中有些女生的心理是我喜欢你可以跟你睡，但你不能看我脱衣服。","tags":[{"name":"读书","slug":"读书","permalink":"http://www.anyaoqi.cn/tags/%E8%AF%BB%E4%B9%A6/"},{"name":"东野圭吾","slug":"东野圭吾","permalink":"http://www.anyaoqi.cn/tags/%E4%B8%9C%E9%87%8E%E5%9C%AD%E5%90%BE/"},{"name":"感悟","slug":"感悟","permalink":"http://www.anyaoqi.cn/tags/%E6%84%9F%E6%82%9F/"}]},{"title":"vue-cli3 项目使用postcss-pxtorem解决移动端适配的问题","date":"2019-11-18T00:39:11.000Z","path":"ck4qqb0wr0008u4v81hw0f7x7.html","text":"一. 项目中引入lib-flexiblelib-flexible 会自动在html的head中添加一个meta name=”viewport”的标签，同时会自动设置html的font-size为屏幕宽度除以10，也就是1rem等于html根节点的font-size。假如设计稿的宽度是750px，此时1rem应该等于75px。假如量的某个元素的宽度是150px，那么在css里面定义这个元素的宽度就是 width: 2rem。 安装 lib-flexible npm install lib-flexible --save 在 main.js 中引入 import &quot;lib-flexible&quot;; 二. 项目中引入 postcss-pxtorempostcss-pxtorem: postcss的一个插件，主要是帮你把px转换成对应的rem；然后：还要用js代码去动态算根目录应该有的字体大小，反正就是一段js代码去动态获取屏幕宽度！ 安装 postcss-pxtorem npm install postcss-pxtorem -D 在vue.config.js 中配置 首先引入 postcss-pxtorem const pxtorem = require(&quot;postcss-pxtorem&quot;); 然后在module.exports.loaderOptions.postcss.plugins里面增加以下内容 pxtorem({ rootValue: 37.5, propList: [&quot;*&quot;] }) 好了，现在从F12控制台审查元素看一下你的px有没有自动转换为rem，如果单位是rem说明成功了。","tags":[{"name":"vue-cli3","slug":"vue-cli3","permalink":"http://www.anyaoqi.cn/tags/vue-cli3/"},{"name":"移动端适配","slug":"移动端适配","permalink":"http://www.anyaoqi.cn/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/"},{"name":"postcss-pxtorem","slug":"postcss-pxtorem","permalink":"http://www.anyaoqi.cn/tags/postcss-pxtorem/"}]}]